# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Jan 3, 2013
# description:

#!/usr/bin/perl

use strict;
use warnings;
use Switch;
use threads;


use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::Stress;
use Test::More tests => 27;

my $node; 
my $nconn = 128;
sub worker_write{
    my ($con,$cguid) = @_;
    my $res;
    $res = ZSSet($node->conn($con), $cguid, 50, 200, 100, 5000000, "ZS_WRITE_MUST_NOT_EXIST");
    #like ($res, qr/^OK.*/, $res);
}

sub worker_read{
    my ($con,$cguid) = @_;
    my $res;
    $res = ZSGet($node->conn($con), $cguid, 50, 100, 100, 5000);
    like ($res, qr/^OK.*/, $res);
}

sub test_run {
    my $cguid;
    my $ret;
    my $choice; 
    my @cguids;
    my @threads;    
    my %cguid_cname;
    my $nctr = 2*1;
    my @ctr_type = ("BTREE","HASH");    
    my @choice = (3,5);
    $ret = $node->start(ZS_REFORMAT => 1);    
    like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=1");
   
    foreach(3,5)
    {
        $choice = $_;
        print "choice=$choice\n";  
        foreach(0..$nctr-1)
        {
            $ret = ZSOpen($node->conn(0),"ctr-$_",$choice,0,"ZS_CTNR_CREATE","yes","ZS_DURABILITY_SW_CRASH_SAFE",$ctr_type[$_%2]);
            like ($ret, qr/^OK.*/, $ret);
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            $cguids[$_]=$cguid;
            $cguid_cname{$cguid}="ctr-$_";
        }

        @threads = ();
        foreach(0..$nctr-1) 
        {
            push(@threads, threads->new (\&worker_write, $_, $cguids[$_]));
        }

        sleep(5);
        $ret = $node->kill_and_dump();
        $ret = $node->start (ZS_REFORMAT => 0,);
        like ($ret, qr/OK.*/, 'Node restart');


        foreach(0..$nctr-1)
        {
            $ret = ZSOpen($node->conn(0),"ctr-$_",$choice,0,"ZS_CTNR_RW_MODE","yes","ZS_DURABILITY_SW_CRASH_SAFE",$ctr_type[$_%2]);
            like ($ret, qr/^OK.*/, $ret);
        }

        $ret = $node->dump_ctnr_success_set();
        my @tmp = split(/\n/,$ret);

        my %cguid_objnum;
        foreach(@tmp){
            $cguid_objnum{$1} = $2 if ($_ =~ /(\d+) = (\d+)/);
        }
       
        foreach $cguid (sort keys %cguid_objnum)
        {
            print "cguid=$cguid--$cguid_objnum{$cguid}\n";
        }

        foreach(0..$nctr-1)
        { 
            $ret = ZSEnumerate($node->conn(0), $cguids[$_]);
            like ($ret, qr/^OK.*/, $ret);
            my $num_count = $1 if ($ret =~ /.*enumerate (\d+) objects.*/);
            my $diff = $num_count-$cguid_objnum{$cguids[$_]};
            if (abs($diff)<5)
            {
                print "difference is $diff\n";
                like ('OK', qr/^OK.*/, "difference is $diff");
            }
            else
            {
                like ('NOT OK', qr/^OK.*/, "difference is $diff,large than 5");
            }
        }

        foreach $cguid (@cguids)
        {
            $ret = ZSClose($node->conn(0), $cguid);
            like ($ret, qr/^OK.*/, $ret);
            $ret = ZSDelete($node->conn(0), $cguid);
            like ($ret, qr/^OK.*/, $ret);
        }
       
    
    }
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => $nconn,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


