# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date:
# description:

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Test::More tests => 84;

my $node;

sub test_run {

    my $ret;
    my $cguid;
    my $ctr_num = 3;
    my $read_failed ;

    foreach my $write ("yes", "no"){
        print "<<test with async_writes=yes>>\n";
        $ret = $node->start (ZS_REFORMAT => 1,);
        like ($ret, qr/OK.*/, 'Node start');

        foreach (0 .. $ctr_num - 1) {
            $ret = ZSOpenContainer (
                    $node->conn (0),
                    cname            => "ctr_$_",
                    fifo_mode        => "no",
                    persistent       => "yes",
                    evicting         => "no",
                    writethru        => "$write",
                    async_writes     => "yes",
                    size             => 1048576,
                    durability_level => "ZS_DURABILITY_PERIODIC",
                    num_shards       => 1,
                    flags            => "ZS_CTNR_CREATE",
                    );
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            like ($ret, qr/OK.*/, "ZSOpenContainer canme=demo0,cguid=$cguid,async_writes=yes,flags=CREATE");

            $ret = ZSGetContainerProps ($node->conn (0), cguid => "$cguid",);
            like ($ret, qr/.*durability_level=0.*/, "durability_level=ZS_DURABILITY_PERIODIC");


            $ret = ZSWriteObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    flags       => "ZS_WRITE_MUST_NOT_EXIST",
                    );
            like ($ret, qr/OK.*/, "ZSWriteObject-->cguid=$cguid nops=4500");

            $ret = ZSReadObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    check       => "yes",
                    keep_read   => "yes",
                    );
            like ($ret, qr/OK.*/, "ZSReadObject->cguid=$cguid nops=4500");
        }

#    $ret = $node->stop();
#    like($ret, qr/OK.*/, 'Node stop');

        $ret = $node->kill ();

#    like($ret, qr/OK.*/,'Node kill');

        $ret = $node->start (ZS_REFORMAT => 0,);
        like ($ret, qr/OK.*/, 'Node restart');

        foreach (0 .. $ctr_num - 1) {
            $ret = ZSOpenContainer (
                    $node->conn (0),
                    cname            => "ctr_$_",
                    fifo_mode        => "no",
                    persistent       => "yes",
                    evicting         => "no",
                    writethru        => "$write",
                    async_writes     => "yes",
                    size             => 1048576,
                    durability_level => "ZS_DURABILITY_PERIODIC",
                    flags            => "ZS_CTNR_RW_MODE",
                    );
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            like ($ret, qr/OK.*/, "ZSOpenContainer cguid=$cguid flags=RW_MODE");
        
            $read_failed = 0;

            $ret = ZSReadObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    check       => "yes",
                    keep_read   => "yes",
                    );
            $read_failed = $1 if ($ret =~ /SERVER_ERROR (\d+) items read failed 0 items check failed/);
            if ($read_failed <479 ){
                like (0, qr/0/, "ZSReadObject:data lost less than 479,$read_failed");
            }
            else {
                like (0, qr/1/, "ZSReadObject:data lost more than 479,$read_failed");
            }

        }

        $ret = $node->stop ();
        like ($ret, qr/OK.*/, 'Node stop');
        print "<<test with async_writes=no>>\n";
        $ret = $node->start (ZS_REFORMAT => 1,);
        like ($ret, qr/OK.*/, 'Node start');

        foreach (0 .. $ctr_num - 1) {
            $ret = ZSOpenContainer (
                    $node->conn (0),
                    cname            => "ctr_$_",
                    fifo_mode        => "no",
                    persistent       => "yes",
                    evicting         => "no",
                    writethru        => "$write",
                    async_writes     => "no",
                    size             => 1048576,
                    durability_level => "ZS_DURABILITY_PERIODIC",
                    num_shards       => 1,
                    flags            => "ZS_CTNR_CREATE",
                    );
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            like ($ret, qr/OK.*/, "ZSOpenContainer canme=demo0,cguid=$cguid,async_writes=no,flags=CREATE");

            $ret = ZSGetContainerProps ($node->conn (0), cguid => "$cguid",);
            like ($ret, qr/.*durability_level=0.*/, "durability_level=ZS_DURABILITY_PERIODIC");


            $ret = ZSWriteObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    flags       => "ZS_WRITE_MUST_NOT_EXIST",
                    );
            like ($ret, qr/OK.*/, "ZSWriteObject-->cguid=$cguid nops=4500");

            $ret = ZSReadObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    check       => "yes",
                    keep_read   => "yes",
                    );
            like ($ret, qr/OK.*/, "ZSReadObject->cguid=$cguid nops=4500");
        }

#    $ret = $node->stop();
#    like($ret, qr/OK.*/, 'Node stop');

        $ret = $node->kill ();

#    like($ret, qr/OK.*/,'Node kill');

        $ret = $node->start (ZS_REFORMAT => 0,);
        like ($ret, qr/OK.*/, 'Node restart');

        foreach (0 .. $ctr_num - 1) {
            $ret = ZSOpenContainer (
                    $node->conn (0),
                    cname            => "ctr_$_",
                    fifo_mode        => "no",
                    persistent       => "yes",
                    evicting         => "no",
                    writethru        => "$write",
                    async_writes     => "no",
                    size             => 1048576,
                    durability_level => "ZS_DURABILITY_SW_CRASH_SAFE",
                    flags            => "ZS_CTNR_RW_MODE",
                    );
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            like ($ret, qr/OK.*/, "ZSOpenContainer cguid=$cguid flags=RW_MODE");

            $read_failed =0 ;
            $ret = ZSReadObject (
                    $node->conn (0),
                    cguid       => "$cguid",
                    key_offset  => 0,
                    key_len     => 25,
                    data_offset => 1000,
                    data_len    => 50,
                    nops        => 4500,
                    check       => "yes",
                    keep_read   => "yes",
                    );
            $read_failed = $1 if ($ret =~ /SERVER_ERROR (\d+) items read failed 0 items check failed/);
            if ($read_failed <479 ){
                like (0, qr/0/, "ZSReadObject:data lost less than 479,$read_failed");
            }
            else {
                like (0, qr/1/, "ZSReadObject:data lost more than 479,$read_failed");
            }
        }
        $ret = $node->stop();
        like($ret, qr/OK.*/, 'Node stop');


    }
    return;
}

sub test_init {
    $node = Fdftest::Node->new (
        ip    => "127.0.0.1",
        port  => "24422",
        nconn => 1,
    );

}

sub test_clean {
    $node->stop ();
    $node->set_ZS_prop (ZS_REFORMAT => 1);

    return;
}

#
# main
#
{
    test_init ();

    test_run ();

    test_clean ();
}

