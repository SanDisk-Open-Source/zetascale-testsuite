# file:
# author: Jing Xu(Lee)
# email: leexu@hengtiansoft.com
# date: Sep 16, 2014
# description:


#!/usr/bin/perl

use strict;
use warnings;
use threads;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::Stress;
use Test::More tests => 92;

my $node; 

sub test_run {
    my ($ret, $cguid);
    my $ncntr = 5;
    my $size = 0;
    my @prop = ([3, "no", "ZS_DURABILITY_HW_CRASH_SAFE" ],);
    #my @data = ([50, 64000, 70000], [100, 128000, 70000], [150, 512, 420000]);
    my @data = ([64, 16000, 21000], [74, 32000, 21000], [84, 64000, 21000], [94, 128000, 21000], [104, 48, 420000]);

    $ret = $node->set_ZS_prop (ZS_FLASH_SIZE => 12);
    like ($ret, qr//, 'set ZS_FLASH_SIZE to 12G');

    $ret = $node->start(ZS_REFORMAT  => 1,);
    like($ret, qr/OK.*/, 'Node started');

    foreach my $p(@prop){
    for(1 .. $ncntr){
        $ret = ZSOpen($node->conn(0),"ctr-$_",$$p[0],$size,"ZS_CTNR_CREATE",$$p[1],$$p[2]);
        like ($ret, qr/^OK.*/, $ret);
      	$cguid = $1 if($ret =~ /OK cguid=(\d+)/);

        my $mode  = ZSTransactionGetMode (
            $node->conn(0),
        );
        chomp($mode);

		foreach my $d(@data){
        $ret = ZSSet($node->conn(0), $cguid, 1000, $$d[0], $$d[1], $$d[2], "ZS_WRITE_MUST_NOT_EXIST");
        if ($mode =~ /.*mode=1.*/){
            like ($ret, qr/SERVER_ERROR ZS_OUT_OF_STORAGE_SPACE.*/, $ret);
        }elsif ($mode =~ /.*mode=2.*/){
            like ($ret, qr/SERVER_ERROR ZS_FLASH_ENOSPC.*/, $ret);
        }
        $ret = ZSGet($node->conn(0), $cguid, 1000, $$d[0], $$d[1], $$d[2]);
        like ($ret, qr/SERVER_ERROR.*/, $ret);
        $ret = ZSEnumerate($node->conn(0), $cguid);
        like ($ret, qr/^OK.*/, $ret);
        }
        $ret = ZSClose($node->conn(0), $cguid);
        like ($ret, qr/^OK.*/, $ret);
        $ret = ZSDelete($node->conn(0), $cguid);
        like ($ret, qr/^OK.*/, $ret);
    }

    }
}

sub test_init {
    $node = Fdftest::Node->new(
        ip     => "127.0.0.1",
        port   => "24422",
        nconn  => 10,
    );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1, ZS_FLASH_SIZE => 128);

    return;
}

#
# main
#
{
    test_init();

    test_run();

    test_clean();
}

# clean ENV
END {
    $node->clean();
}
                
