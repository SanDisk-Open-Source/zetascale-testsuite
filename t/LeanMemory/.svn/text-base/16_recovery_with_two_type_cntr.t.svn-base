# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Jan 3, 2013
# description:

#!/usr/bin/perl

use strict;
use warnings;
use Switch;
use threads;


use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::Stress;
use Test::More tests => 554;

my $node; 
my $nconn = 50;

sub worker_write{
    my ($con,$cguid,$nops) = @_;
    my $res;
    $res = ZSSet($node->conn($con), $cguid, 1000, 50, 65000, $nops, "ZS_WRITE_MUST_NOT_EXIST");
    like ($res, qr/^OK.*/, $res);
}

sub worker_read{
    my ($con,$cguid,$nops) = @_;
    my $res;
    $res = ZSGet($node->conn($con), $cguid, 1000, 50, 65000, $nops);
    like ($res, qr/^OK.*/, $res);
}

sub worker_del{
    my ($con,$cguid,$nops) = @_;
    my $res;
    $res = ZSDel($node->conn($con), $cguid, 1000, 50, $nops);
    like ($res, qr/^OK.*/, $res);
}

sub test_run {
    my ($ret, $cguid, @cguids, @threads);
    my $nctr = 50;
    my $nops = 5000;
    my @ctr_type = ("BTREE","HASH");

    $ret = $node->start(ZS_REFORMAT => 1);    
    like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=1");
   
    foreach(0..$nctr-1)
    {
        $ret = ZSOpen($node->conn(0),"ctr-$_",5,0,"ZS_CTNR_CREATE","no","ZS_DURABILITY_SW_CRASH_SAFE",$ctr_type[$_%2]);
        like ($ret, qr/^OK.*/, $ret);
        $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
        $cguids[$_]=$cguid;
    }

    @threads = ();
    foreach(0..$nctr-1) 
    {
        push(@threads, threads->new (\&worker_write, $_, $cguids[$_], $nops));
    }
    $_->join for (@threads); 

    @threads = ();
    foreach(0..$nctr-1)
    {
        push(@threads, threads->new (\&worker_read, $_, $cguids[$_], $nops));
    }
    $_->join for (@threads);

    @threads = ();
    foreach(0..$nctr-1)
    {
        push(@threads, threads->new (\&worker_del, $_, $cguids[$_], $nops/2));
    }
    $_->join for (@threads);

    foreach(0..$nctr-1)
    { 
        $ret = ZSEnumerate($node->conn(0), $cguids[$_]);
        like ($ret, qr/^OK.*/, $ret);
    }

    $ret = ZSClose($node->conn(0), $cguid);
    like ($ret, qr/^OK.*/, $ret);

    $ret = $node->stop();
    like($ret,qr/OK.*/,"Node Stop");
    $ret = $node->start(ZS_REFORMAT => 0);
    like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=0");

    foreach(0..$nctr-1)
    {
        $ret = ZSOpen($node->conn(0),"ctr-$_",5,0,"ZS_CTNR_RW_MODE","no","ZS_DURABILITY_SW_CRASH_SAFE",$ctr_type[$_%2]);
        like ($ret, qr/^OK.*/, $ret);
    }

    @threads = ();
    foreach(0..$nctr-1)
    {
        push(@threads, threads->new (\&worker_write, $_, $cguids[$_], $nops/2));
    }
    $_->join for (@threads);

    @threads = ();
    foreach(0..$nctr-1)
    {
        push(@threads, threads->new (\&worker_read, $_, $cguids[$_], $nops));
    }
    $_->join for (@threads);

    foreach(0..$nctr-1)
    {
        $ret = ZSEnumerate($node->conn(0), $cguids[$_]);
        like ($ret, qr/^OK.*/, $ret);
    }

    foreach $cguid (@cguids)
    {
        $ret = ZSClose($node->conn(0), $cguid);
        like ($ret, qr/^OK.*/, $ret);
        $ret = ZSDelete($node->conn(0), $cguid);
        like ($ret, qr/^OK.*/, $ret);
    }
       
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => $nconn,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


