# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Jan 3, 2013
# description:

#!/usr/bin/perl

use strict;
use warnings;
use Switch;
use threads;


use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::Stress;
use Test::More tests => 2533;

my $node; 
my $nctr = 5;
my $nthread = 20;
my $nconn = $nctr*$nthread;
#my @data = ([50, 64000, 6000], [100, 128000, 6000], [150, 512, 3600]);
my @data = ([64, 16000, 3000], [74, 32000, 3000], [84, 64000, 3000], [94, 128000, 3000], [104, 48,60000]);

sub worker_write{
    my ($i, $j, $cguid) = @_;
    my $res;
    foreach my $d(@data){
    	$res = ZSSet($node->conn($i), $cguid, ($i*$nthread-($nthread-$j))*$$d[2], $$d[0], $$d[1], $$d[2], "ZS_WRITE_MUST_NOT_EXIST");
    	like ($res, qr/^OK.*/, $res);
    }
}

sub worker_read{
    my ($i, $j, $cguid) = @_;
    my $res;
    foreach my $d(@data){
    	$res = ZSGet($node->conn($i), $cguid, ($i*$nthread-($nthread-$j))*$$d[2], $$d[0], $$d[1], $$d[2]);
    	like ($res, qr/^OK.*/, $res);
    }
}

sub worker_del{
    my ($i, $j, $cguid) = @_;
    my $res;
    foreach my $d(@data){
    	$res = ZSDel($node->conn($i), $cguid, ($i*$nthread-($nthread-$j))*$$d[2], $$d[0], $$d[2]);
    	like ($res, qr/^OK.*/, $res);
    }
}

sub test_run {
    my ($ret, $cguid, @cguids, @threads);
    my $size = 0;
    my @prop = ([3, "no", "ZS_DURABILITY_HW_CRASH_SAFE" ],);    

    $ret = $node->start(
        ZS_REFORMAT   => 1, 
        threads       => $nconn,
    );    
    like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=1");
   
    foreach my $p(@prop){
    	foreach(0..$nctr-1)
    	{
        	$ret = ZSOpen($node->conn(0),"ctr-$_",$$p[0],$size,"ZS_CTNR_CREATE",$$p[1],$$p[2]);
        	like ($ret, qr/^OK.*/, $ret);
        	$cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
        	$cguids[$_]=$cguid;
    	}

    	@threads = ();
    	foreach my $i(1..$nctr) 
    	{
            foreach my $j(1..$nthread){
        	push(@threads, threads->new (\&worker_write, $i, $j, $cguids[$i-1]));
            }
    	}
    	$_->join for (@threads); 

    	@threads = ();
    	foreach my $i(1..$nctr)
    	{  
            foreach my $j(1..$nthread){
        	push(@threads, threads->new (\&worker_read, $i, $j, $cguids[$i-1]));
            }
    	}
    	$_->join for (@threads);

    	@threads = ();
    	foreach my $i(1..$nctr)
    	{
            foreach my $j(1..$nthread){
        	push(@threads, threads->new (\&worker_del, $i, $j, $cguids[$i-1]));
            }
    	}
    	$_->join for (@threads);

    	foreach(0..$nctr-1)
    	{ 
            	$ret = ZSEnumerate($node->conn(0), $cguids[$_]);
            	like ($ret, qr/^OK.*/, $ret);
                $ret = ZSClose($node->conn(0), $cguids[$_]);
                like ($ret, qr/^OK.*/, $ret);
    	}

	$ret = $node->stop();
	like($ret,qr/OK.*/,"Node Stop");
	$ret = $node->start(ZS_REFORMAT => 0);
	like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=0");

	foreach(0..$nctr-1)
	{
		$ret = ZSOpen($node->conn(0),"ctr-$_",$$p[0],$size,"ZS_CTNR_RW_MODE",$$p[1],$$p[2]);
		like ($ret, qr/^OK.*/, $ret);
	}

	@threads = ();
	foreach my $i(1..$nctr)
	{
            foreach my $j(1..$nthread){
		push(@threads, threads->new (\&worker_write, $i, $j, $cguids[$i-1]));
            }
	}
	$_->join for (@threads);

	@threads = ();
	foreach my $i(1..$nctr)
	{
            foreach my $j(1..$nthread){
		push(@threads, threads->new (\&worker_read, $i, $j, $cguids[$i-1]));
            }
	}
	$_->join for (@threads);

	foreach $cguid (@cguids)
	{
		$ret = ZSClose($node->conn(0), $cguid);
		like ($ret, qr/^OK.*/, $ret);
		$ret = ZSDelete($node->conn(0), $cguid);
		like ($ret, qr/^OK.*/, $ret);
	}
    }
       
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => $nconn,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


