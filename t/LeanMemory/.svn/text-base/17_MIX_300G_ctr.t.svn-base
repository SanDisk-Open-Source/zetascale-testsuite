# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Jan 3, 2013
# description:

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::Stress;
use Test::More tests => 85;

my $node; 
sub test_run {
    my $cguid;
    my $ret; 
    my $keyoffset=250;
    my $loops=3;
    my @prop = ([3, "ZS_DURABILITY_HW_CRASH_SAFE", "no"],);
    #my @data = ([50, 64000, 200000], [100, 128000, 200000], [150, 512, 1200000]);
    my @data = ([64, 16000, 100000], [74, 32000, 100000], [84, 64000, 100000], [94, 128000, 100000], [104, 48,2000000]);

    $ret = $node->start(ZS_REFORMAT => 1);    
    like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=1");

    foreach my $p(@prop){
        for(my $i=0; $i<$loops; $i++){
            my $nops = 0;
            print "=CYCLE:$i=\n";
	    $ret = ZSOpen($node->conn(0),"ctr-$i",$$p[0],0,"ZS_CTNR_CREATE",$$p[2],$$p[1]);
	    like ($ret, qr/^OK.*/, $ret);
	    $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
	    $ret = ZSGetConts($node->conn(0),1);
	    like ($ret, qr/^OK.*/, $ret);

            foreach my $d(@data){
	        $ret = ZSSet($node->conn(0),$cguid,$keyoffset,$$d[0],$$d[1],$$d[2],"ZS_WRITE_MUST_NOT_EXIST");
	        like ($ret, qr/^OK.*/, $ret);
	        $ret = ZSGet($node->conn(0), $cguid,$keyoffset,$$d[0],$$d[1],$$d[2]);
	        like ($ret, qr/^OK.*/, $ret);
                $nops = $nops + $$d[2];
	    }
	    $ret = ZSFlushRandom($node->conn(0),$cguid,$keyoffset,1);
	    like ($ret, qr/^OK.*/, $ret);

	    my $mode  = ZSTransactionGetMode (
                $node->conn(0),
     	    );
	    chomp($mode);

	    if ($mode =~ /.*mode=1.*/){
                $ret = ZSRangeAll($node->conn(0), $cguid, $nops);
		like ($ret, qr/^OK.*/, $ret);
	    }elsif ($mode =~ /.*mode=2.*/){
                $ret = ZSEnumerate($node->conn(0), $cguid);
		like ($ret, qr/^OK.*/, $ret);
	    }
            foreach my $d(@data){
	        $ret = ZSDel($node->conn(0),$cguid,$keyoffset,$$d[0],$$d[2]/2);
	        like ($ret, qr/^OK.*/, $ret);
	    }

	    if ($mode =~ /.*mode=1.*/){
                $ret = ZSRangeAll($node->conn(0), $cguid, $nops/2);
		like ($ret, qr/^OK.*/, $ret);
            }elsif ($mode =~ /.*mode=2.*/){
		$ret = ZSEnumerate($node->conn(0), $cguid);
		like ($ret, qr/^OK.*/, $ret);
	    }
	    $ret = ZSClose($node->conn(0), $cguid);
	    like ($ret, qr/^OK.*/, $ret);

	    $ret = $node->stop();
	    like($ret,qr/OK.*/,"Node Stop");
	    $ret = $node->start(ZS_REFORMAT => 0);    
	    like($ret,qr/OK.*/,"Node Start: REFORMAT=0");

	    $ret = ZSOpen($node->conn(0),"ctr-$i",$$p[0],0,"ZS_CTNR_RW_MODE",$$p[2],$$p[1]);
	    like ($ret, qr/^OK.*/, $ret);

	    if ($mode =~ /.*mode=1.*/){
                $ret = ZSRangeAll($node->conn(0), $cguid, $nops/2);
		like ($ret, qr/^OK.*/, $ret);
	    }elsif ($mode =~ /.*mode=2.*/){
                $ret = ZSEnumerate($node->conn(0), $cguid);
		like ($ret, qr/^OK.*/, $ret);
	    }
	    $ret = ZSClose($node->conn(0), $cguid);
	    like ($ret, qr/^OK.*/, $ret);
	    $ret = ZSDelete($node->conn(0), $cguid);
	    like ($ret, qr/^OK.*/, $ret);
	    $ret = ZSGetConts($node->conn(0),0);
	    like ($ret, qr/^OK.*/, $ret);
	}
    }
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => 1,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


