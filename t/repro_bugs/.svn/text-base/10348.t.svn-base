# file:28_mix3_large_container.t
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Dec 6, 2012
# description:large size(300G)container recovery test 

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Test::More tests => 17;

my $node; 

sub test_run {

    my $ret;
    my $cguid;
   # my $nops=20000000;
    my $nops=2000000;
    my $match;
    my $loop=1;
    
    $ret = $node->start(
            ZS_REFORMAT  => 1,
            );
    like($ret, qr/OK.*/, 'Node start');


    for(my $i=1;$i<=$loop;$i++){
        print "==CYCLE:$i==\n";
        $ret = ZSOpenContainer(
                $node->conn(0), 
                cname            => "demo0",
                fifo_mode        => "no",
                persistent       => "yes",
                evicting         => "no",
                writethru        => "yes",
                async_writes     => "no",
               #size             => 314572800,
                size             => 0,
                durability_level => "ZS_DURABILITY_SW_CRASH_SAFE",
                num_shards       => 1,
                flags            => "ZS_CTNR_CREATE",
                );
        $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
        like($ret, qr/OK.*/, "ZSOpenContainer canme=demo0,cguid=$cguid,fifo_mode=no,persistent=yes,evicting=no,writethru=yes,flags=CREATE");

        $ret = ZSWriteObject(
                $node->conn(0),
                cguid         => "$cguid",     
                #key_offset    => 1,
                key           => 1, 
                key_len       => 250, 
                #data_offset   => 1000,
                data_offset  => 1, 
                data_len      => 1024, 
                nops          => "$nops",
                flags         => "ZS_WRITE_MUST_NOT_EXIST",
                );
        like($ret, qr/OK.*/, "ZSWriteObject-->cguid=$cguid key_len=250 data_len=1024 nops=$nops");

        $ret = ZSReadObject(
                $node->conn(0),
                cguid         => "$cguid",     
                #key_offset    => 1,
                key           => 1, 
                key_len       => 250, 
                data_offset   => 1, 
                data_len      => 1024, 
                nops          => "$nops",
                check         => "yes",
                keep_read     => "yes",
                );
        like($ret, qr/OK.*/, "ZSReadObject->cguid=$cguid key_len=250 data_len=1024 nops=$nops");

        $ret = ZSFlushContainer(
                $node->conn(0),
                cguid     => "$cguid",
                );
        like ($ret, qr/OK.*/, "ZSFlushContainer->cguid=$cguid");
        
        $ret = ZSGetRange(

               $node->conn(0),
               cguid  => $cguid,
           );
        like($ret, qr/OK.*/, "ZSGetRange only with cguid");
        $ret = ZSGetNextRange (
                $node->conn(0),
                n_in     => $nops +2,
                check    => "yes", 
           );   
         my $n_out = $1 if($ret =~/OK n_out=(\d+)/);
         like($ret, qr/OK.*/, "ZSGetNextRange:Get $n_out objects ,$ret");
         $ret = ZSGetRangeFinish($node->conn(0));
         like($ret, qr/OK.*/, "ZSGetRangeFinish");

         $ret = ZSDeleteObject(
                $node->conn(0),
                cguid        => "$cguid",
                #key_offset   => 1,
                key          => 1, 
                key_len      => 250,
                nops         => $nops/2,
                );
        $match=$nops/2;
        like ($ret, qr/OK.*/, "ZSDeleteObject->cguid=$cguid,key=1,key_len=250,nops=$match.");

        $ret =ZSGetRange(
             $node->conn(0),
             cguid  => $cguid,
           );
        like($ret, qr/OK.*/, "ZSGetRange only with cguid");
        $ret =ZSGetNextRange(
              $node->conn(0),
              n_in  => $match +2,
              check => "yes",
         );

         $n_out =$1 if($ret =~/OK n_out=(\d+)/);
         like($ret, qr/OK.*/, "ZSGetNextRange:Get $n_out objects ,$ret");
         $ret =ZSGetRangeFinish($node->conn(0));
         like($ret, qr/OK.*/, "ZSGetRangeFinish");

         $ret = ZSCloseContainer(
                $node->conn(0),
                cguid     => "$cguid",
                );
        like($ret, qr/OK.*/, "ZSCloseContainer->cguid=$cguid");

        $ret = ZSDeleteContainer(
                $node->conn(0),
                cguid     => "$cguid",
                );
        like($ret, qr/OK.*/, "ZSDeleteContainer->cguid=$cguid");

        $ret = ZSGetContainers(
                 $node->conn(0),
                );
        like($ret, qr/OK n_cguids=0/, "ZSGetContainers n_cguid=0");

        $ret = $node->stop();
        like($ret, qr/OK.*/, 'Node stop');

        $ret = $node->start(
                ZS_REFORMAT  => 0,
                );
        like($ret, qr/OK.*/, 'Node restart');

    }
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => 1,
            );

}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);

    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


