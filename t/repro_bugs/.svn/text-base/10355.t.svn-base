# file: basic.pl
# author: yiwen sun
# email: yiwensun@hengtiansoft.com
# date: Oct 15, 2012
# description: basic sample for testcase

#!/usr/bin/perl

use strict;
use warnings;
use Switch;
use threads;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Stress;
use Fdftest::Node;
use Test::More tests => 6;

my $node; 
my $nconn=256;
my $ncntr=128;
my $loop =1000;
my %chash;
my @cguids;

=comment by cindy
$nconn=120;
$ncntr=60;
$loop=3;
=cut

sub open_close_delete {
	my ($connid, $cname) = @_;
	my $keyoffset = int(rand(250));
	my $ret;
	my $cguid = $chash{$cname};
	my @flags=("ZS_CTNR_RW_MODE", "ZS_CTNR_RO_MODE");

	if ( defined $cguid ){
		return;
	}

	$ret = ZSClose($node->conn($connid), $cguid);
	if (! $ret =~ /OK.*/){
		return;
	}

	$ret = ZSDelete($node->conn($connid), $cguid);
	if (! $ret =~ /OK.*/){
		return;
	}

	@cguids = grep { $_ ne "$cguid" } @cguids;
	$ret=ZSOpen($node->conn($connid), $cname,"ZS_CTNR_CREATE", "yes", 1048576,3);
	#$ret=ZSOpen($node->conn($connid), $cname,"ZS_CTNR_CREATE", "no", 1048576,3);
    $cguid = $1 if($ret =~ /OK cguid=(\d+)/);
    if ( defined $cguid ){
        $chash{$cname} = $cguid;
		push(@cguids,$cguid);
    }else{
		delete $chash{$cname};
	}
	ZSSetGet($node->conn($connid), $cguid,$keyoffset);
	return;
}

sub test_run {
    my $ret;
	my @threads;
	my $nop = 5;

    $ret = $node->start(
			   gdb_switch	=> 1,
               ZS_REFORMAT  => 1,
           );
    like($ret, qr/OK.*/, 'Node start');
    
	# Create containers 
	for ( 0 .. $ncntr) { 
		my $ctrname	= 'ctrn-'.$_;
		my $cguid;
		my $flags="ZS_CTNR_CREATE";
		$ret = ZSOpen($node->conn(0),$ctrname,"ZS_CTNR_CREATE","yes", 1048576, 3);
		#$ret = ZSOpen($node->conn(0),$ctrname,"ZS_CTNR_CREATE","no", 1048576, 3);
		chomp($ret);
	    $cguid = $1 if($ret =~ /OK cguid=(\d+)/);
		if ( defined $cguid ){
			push(@cguids,$cguid);
			$chash{$ctrname} = $cguid;
		}
	}
	if(!@cguids){
		return;
	}
	
	for( 0 .. $loop){
		my $keyoffset = 0 + $_*$nconn;
		my $ctrname;
		@threads=();
		for ( 0 .. $nconn){
			$keyoffset = $keyoffset + $_;
			my $val = $_ % $nop;
			switch ($val) {
				case (0) {
                    push(@threads, threads->new(\&ZSEnumerate,$node->conn($_),$cguids[rand(@cguids)]));
					#$ctrname = (sort keys %chash)[rand(@cguids)];
					#push(@threads, threads->new(\&ZSOpen, $node->conn($_),$ctrname,"ZS_CTNR_RW_MODE"));
				}
				case (1) {
                    push(@threads, threads->new(\&ZSGetConts,$node->conn($_)));
				}
				case (2) {
                    push(@threads, threads->new(\&ZSGetProps,$node->conn($_),$cguids[rand(@cguids)]));
				}
                case (3) {
                    push(@threads, threads->new(\&ZSEnumerate,$node->conn($_),$cguids[rand(@cguids)]));
                }
				case (4) {
					push(@threads, threads->new(\&ZSSetGet,$node->conn($_),$cguids[rand(@cguids)], $keyoffset));
				}
			}
		}
		$_->join for (@threads);
		$ctrname = (sort keys %chash)[rand(@cguids)];
        #open_close_delete(($_),$ctrname);

		$ret = $node->stop();
		like($ret, qr/OK.*/, 'Node stop');
	    $ret = $node->start(
	             # gdb_switch  => 1,
               ZS_REFORMAT  => 0,
    	);
	    like($ret, qr/OK.*/, 'Node start');
		
		@cguids=();
		@cguids=ZSGetConts($node->conn(0));
		my $key;
		my $value;
		my %tmp=%chash;
		%chash=();
		while(($key,$value) = each %tmp){
			if(!(grep /$value/, @cguids) ){
				$ret = ZSOpen($node->conn(0),$key,"ZS_CTNR_CREATE", "yes", 1048576, 2);
				#$ret = ZSOpen($node->conn(0),$key,"ZS_CTNR_CREATE", "no", 1048576, 2);
				chomp($ret);
				my $cguid = $1 if($ret =~ /OK cguid=(\d+)/);
				if ( defined $cguid){
					push(@cguids, $cguid);
					$chash{$key} = $cguid;
				}
			}else{
				$chash{$key} = $value;
				ZSOpen($node->conn(0),$key, "ZS_CTNR_RW_MODE");
			}
		}
		$ctrname = (sort keys %chash)[rand(@cguids)];
        #open_close_delete(($_),$ctrname);
	}
		
	foreach ( @cguids ) {
		ZSClose($node->conn(0), $_);
		ZSDelete($node->conn(0), $_);
	}
    return;
}


sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => $nconn,
            );
    
    return;
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);

    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


