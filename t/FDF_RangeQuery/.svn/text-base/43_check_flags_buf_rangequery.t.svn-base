# file: t/ZS_RangeQuery/43_check_flags_buf_rangequery.t
# author: shujing zhu
# email: shujingzhu@hengtiansoft.com
# date: June 20, 2013
# description: range query cntr

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::BasicTest;
use Test::More tests => 239;
use threads;

my $node;
sub test_RangeQuery{
    my($conn, $cguid, $keybuf,$databuf,$start_key, $startlen,$endlen,$end_key,$flags,$out) = @_;
    my $ret = ZSGetRange (
                $conn,
                cguid         => $cguid,
                keybuf_size   => $keybuf,
                databuf_size  => $databuf,
                keylen_start  => $startlen,
                keylen_end    => $endlen,
                start_key     => $start_key,
                end_key       => $end_key,
                flags         => $flags,
                );
    like($ret, qr/OK.*/,"ZSGetRange:Get $start_key ~ $end_key,startlen=$startlen,endlen=$endlen,
                         keybuf = $keybuf,databuf=$databuf,flags=$flags");

    $ret = ZSGetNextRange (
                $conn,
                n_in          => $out+100000,
                check         => "yes",
                );
    if($ret =~ /SERVER_ERROR ZS_QUERY_DONE/&&$out==0){
        like($ret, qr/SERVER_ERROR ZS_QUERY_DONE.*/, "ZSGetNextRange:Get 0 objects,flag=$flags -> $ret");
    }
    else{
        my $n_out = $1 if($ret =~ /OK n_out=(\d+)/);
        like($ret, qr/OK n_out=$out.*/, "ZSGetNextRange:Get $n_out objects ,$ret");
    }

    $ret = ZSGetRangeFinish($conn);
    like($ret, qr/OK.*/, "ZSGetRangeFinish");
 }

sub test_RangeQuery_invalid{
    my($conn, $cguid, $keybuf,$databuf,$start_key, $startlen,$endlen,$end_key,$flags,$out) = @_;
    my $ret = ZSGetRange (
                $conn,
                cguid         => $cguid,
                keybuf_size   => $keybuf,
                databuf_size  => $databuf,
                keylen_start  => $startlen,
                keylen_end    => $endlen,
                start_key     => $start_key,
                end_key       => $end_key,
                flags         => $flags,
                );
    if($keybuf ==0 || 0 == $databuf){
        like($ret, qr/CLIENT_ERROR.*/,"ZSGetRange:keybuf=$keybuf,databuf=$databuf,->$ret");
	}
    elsif($ret =~ /OK/){
        like($ret, qr/OK.*/,"ZSGetRange:Get $start_key~$end_key with $flags,keybuf=$keybuf,databuf=$databuf -> $ret");
        $ret = ZSGetNextRange (
                $conn,
                n_in          => $out+1000000,
                check         => "yes",
                );
        like($ret, qr/SERVER_ERROR.*/, "ZSGetNextRange:->$ret");

        $ret = ZSGetRangeFinish($conn);
        like($ret, qr/OK.*/, "ZSGetRangeFinish");
    }
}
                
                
sub test_run {

    my $ret;
    my $cguid;
    my $cname = "Tran_Cntr";  
    my $key = 1;
    my $val_offset = $key;
    my $size = 0;
    my $flags = 'ZS_RANGE_START_GE|ZS_RANGE_END_LE' ;
    my $keybuf = 60;
    my $databuf = 1024;
    my @prop = (["yes","no","yes","ZS_DURABILITY_HW_CRASH_SAFE","no"],);
    #my @data = ([50, 64000, 6250], [100, 128000, 6250], [150, 512, 37500]);
    my @data = ([64, 16000, 3000], [74, 32000, 3000], [84, 64000, 3000], [94, 128000, 3000], [104, 48,60000]);

    $ret = $node->start(
                ZS_REFORMAT  => 1,
           );
    like($ret, qr/OK.*/, 'Node start');

    foreach my $p(@prop){
        $ret = ZSOpenContainer(
                    $node->conn(0),
                    cname            => $cname,
                    fifo_mode        => "no",
                    persistent       => $$p[0],
                    writethru        => $$p[2],
                    evicting         => $$p[1],
                    size             => $size,
                    durability_level => $$p[3],
                    async_writes     => $$p[4],
                    num_shards       => 1,
                    flags            => "ZS_CTNR_CREATE"
                    );   
        $cguid = $1 if($ret =~ /OK cguid=(\d+)/);
        like($ret, qr/OK.*/, "ZSopenContainer: $cname, cguid=$cguid");

        foreach my $d(@data){
            $ret = ZSWriteObject(
                        $node->conn(0),
                        cguid         => $cguid,
                        key           => $key,
                        key_len       => $$d[0],
                        data_offset   => $val_offset,
                        data_len      => $$d[1],
                        nops          => $$d[2],
                        flags         => "ZS_WRITE_MUST_NOT_EXIST",
                        );
            like($ret, qr/OK.*/, "ZSWriteObject: load $$d[2] objects keylen= $$d[0] datalen=$$d[1] to $cname, cguid=$cguid");

            $keybuf = 1;
            $databuf = 1;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);
            
            $keybuf = 0;
            $databuf = 0;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);
            $keybuf = -1;
            $databuf = -1;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);
             
            $keybuf = 1024;
            $databuf = 1;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);
            
            $keybuf = 1024*1024;
            $databuf = 1024*1024*1024*1024;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);

            $keybuf = $$d[0];
            $databuf = 1;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);

            $keybuf = 20;
            $databuf = 1024;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags,$$d[2]);

            $keybuf = 1;
            $databuf = 1;
            my $flags1 = 'ZS_RANGE_START_GE|ZS_RANGE_END_LE|ZS_RANGE_BUFFER_PROVIDED' ;
            test_RangeQuery_invalid( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags1,0);
            
            $keybuf = 0;
            $databuf = 0;
            test_RangeQuery_invalid( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags1,0);

            $keybuf = 1;
            $databuf = 1;
            my $flags2 = 'ZS_RANGE_START_GE|ZS_RANGE_END_LE|ZS_RANGE_ALLOC_IF_TOO_SMALL';
            test_RangeQuery($node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags2,$$d[2]); 
                       
            $keybuf = 1;
            $databuf = 1;
            my $flags3 = 'ZS_RANGE_START_GE|ZS_RANGE_END_LE|ZS_RANGE_BUFFER_PROVIDED|ZS_RANGE_ALLOC_IF_TOO_SMALL' ;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags3,$$d[2]);
            
            $keybuf = $$d[0]*2;
            $databuf = $$d[1]*2;
            my $flags4 = 'ZS_RANGE_START_GE|ZS_RANGE_END_LE|ZS_RANGE_BUFFER_PROVIDED' ;
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags4,$$d[2]);
            
            $keybuf = $$d[0];
            $databuf = $$d[1];
            test_RangeQuery( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags4,$$d[2]);
            
            $keybuf = $$d[0]-1;
            $databuf = $$d[1];
            test_RangeQuery_invalid( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags4,$$d[2]);
            
            $keybuf = $$d[0]-1;
            $databuf = $$d[1]*2;
            test_RangeQuery_invalid( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags4,$$d[2]);
            
            $keybuf = $$d[0];
            $databuf = $$d[1]-1;
            test_RangeQuery_invalid( $node->conn(0), $cguid,$keybuf,$databuf,$key, $$d[0],$$d[0],$$d[2]+$key,$flags4,$$d[2]);
        }
        $ret = ZSCloseContainer(
                    $node->conn(0),
                    cguid      => $cguid,
                    );
        like($ret, qr/OK.*/, 'ZSCloseContainer');

        $ret = ZSDeleteContainer(
                    $node->conn(0),
                    cguid      => $cguid,
                    );
        like($ret, qr/OK.*/, 'ZSDeleteContainer');
    }
    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1",
                port   => "24422",
                nconn  => 1,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);

    return;
}

#
# main
#
{
    test_init();

    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


