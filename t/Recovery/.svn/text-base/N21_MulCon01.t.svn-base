# file:
# author: yiwen lu
# email: yiwenlu@hengtiansoft.com
# date: Jan 3, 2013
# description:

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::Node;
use Fdftest::TestCase;
use Test::More tests => 18;
use threads;

my $node;
my $connection=3;
#my @data = ([50, 64000, 7000], [100, 128000, 7000], [150, 512, 42000]);
my @data = ([64, 16000, 3000], [74, 32000, 3000], [84, 64000, 3000], [94, 128000, 3000], [104, 48, 60000]);

sub worker{
    my ($conn,$cname,$choice,$durb,$async_writes)= @_;
    my $ret;
    my $nops = 0;
    $ret = OpenContainer($conn,$cname,"ZS_CTNR_CREATE",0,$choice,$durb,$async_writes);
    my $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
    foreach my $d(@data){
        WriteReadObjects($conn,$cguid,0,$$d[0],1000,$$d[1],$$d[2]);
    }
    FlushContainer($conn,$cguid);
    CloseContainer($conn,$cguid);
    OpenContainer($conn,$cname,"ZS_CTNR_RW_MODE",0,$choice,$durb,$async_writes);
    foreach my $d(@data){
        ReadObjects($conn,$cguid,0,$$d[0],1000,$$d[1],$$d[2]);
        $nops = $nops + $$d[2];
    }
    ContainerEnumerate($conn,$cguid,$nops);
    CloseContainer($conn,$cguid);
    DeleteContainer($conn,$cguid);
}
 
sub test_run {
    my $ret; 
    my @threads;
    my @prop = ([4, "ZS_DURABILITY_HW_CRASH_SAFE", "no"],);
    
    foreach my $p(@prop){
        $ret = $node->start(ZS_REFORMAT => 1,gdb_switch => 1);    
        like($ret,qr/OK.*/,"Node Start: ZS_REFORMAT=1");
   
        @threads = ();
        foreach(0..$connection-1){
            push(@threads, threads->new(\&worker,$node->conn($_),"ctr-$_",$$p[0],$$p[1],$$p[2]));
        }
        $_->join for (@threads);
	print @threads;
    
	$ret = $node->stop();
	like($ret,qr/OK.*/,"Node Stop");
    }

    return;
}

sub test_init {
    $node = Fdftest::Node->new(
                ip     => "127.0.0.1", 
                port   => "24422",
                nconn  => 10,
            );
}

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    return;
}

#
# main
#
{
    test_init();
    
    test_run();

    test_clean();
}


# clean ENV
END {
    $node->clean();
}


