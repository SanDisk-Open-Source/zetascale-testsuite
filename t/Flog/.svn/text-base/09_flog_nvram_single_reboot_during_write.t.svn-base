# file: 
# author: Yiwen Lu
# email: yiwenlu@hengtiansoft.com
# date: Sep 19, 2014
# description: 

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::RemoteNode;
use Fdftest::Stress;
use Test::More 'no_plan';
use threads::shared;
use threads 'exit' => 'threads_only';

my $node;
my @count:shared = (0,0,0,0,0);
sub worker_write{
    $SIG{'KILL'} = sub { print "killed\n"; threads->exit(); };
    my ($con,$cguid) = @_;
    my $ret;
    my $flag;
    foreach(1..1000){
        $flag = 1;
        $ret = ZSTransactionStart(
            $node->conn($con),
            );
        like($ret, qr/OK.*/, "$node->{'port'},cguid=$cguid,offset=$_,".'ZSTransactionStart');
        $ret = ZSSet($node->conn($con), $cguid, $_, 100, 64000,1, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSSet($node->conn($con), $cguid, $_, 101, 128000,1, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSSet($node->conn($con), $cguid, $_, (102+$_), 512,6, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSTransactionCommit(
            $node->conn($con)
            );
        like($ret, qr/OK.*/, "$node->{'port'},cguid=$cguid,offset=$_,".'ZSTransactionCommit');
        $flag = 0 if (!($ret =~ /OK.*/));
        $count[$con]++ if ($flag == 1);
    }
}

sub worker_read{
    my $ret;
    my ($con,$cguid,$count) = @_;
    foreach(1..$count){
        $ret = ZSGet($node->conn($con), $cguid, $_, 100, 64000, 1);
        like ($ret, qr/^OK.*/, $cguid.":".$ret);
        $ret = ZSGet($node->conn($con), $cguid, $_, 101, 128000, 1);
        like ($ret, qr/^OK.*/, $cguid.":".$ret);
        $ret = ZSGet($node->conn($con), $cguid, $_, (102+$_), 512, 6);
        like ($ret, qr/^OK.*/, $cguid.":".$ret);
    }
    $ret = ZSGet($node->conn($con), $cguid, $count+1, 100, 64000, 1);
    like ($ret, qr/^Error.*/, $cguid.":".$ret);
    $ret = ZSGet($node->conn($con), $cguid, $count+1, 101, 128000, 1);
    like ($ret, qr/^Error.*/, $cguid.":".$ret);
    $ret = ZSGet($node->conn($con), $cguid, $count+1, (102+$count+1), 512, 6);
    like ($ret, qr/^Error.*/, $cguid.":".$ret);
}

my @cguids;
my @threads;
my $nctr = 4;
my @ctr_type = ("BTREE","BTREE");
my $ret;
my $cguid;


sub test_run_node {
    $node->set_ZS_prop(
        ZS_FLOG_MODE => "ZS_FLOG_NVRAM_MODE",
        ZS_FLOG_NVRAM_FILE => "/tmp/nvram_file",
        ZS_FLOG_NVRAM_FILE_OFFSET => 0,   
        ZS_LOG_BLOCK_SIZE => 4096,
    );
    $ret = $node->start(
                        ZS_REFORMAT  => 1
                        );
    like($ret, qr/OK.*/, 'remote engine started');

    foreach(0..$nctr-1)
    {
         $ret = ZSOpen($node->conn(0),"ctr-$_",3,0,"ZS_CTNR_CREATE","yes","ZS_DURABILITY_HW_CRASH_SAFE",$ctr_type[$_%2]);
         like ($ret, qr/^OK.*/, $ret);
         $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
         $cguids[$_]=$cguid;
    }

    @threads = ();
    foreach(@count){print "$_\n";}
    foreach(0..$nctr-1)
    {
        push(@threads, threads->new (\&worker_write,$_, $cguids[$_]));
    }
    return;
}

sub test_run_recovery {

    print "<<< Test recovery with async_write=yes on remote engine >>>.\n";
    $ret = $node->start(
                        ZS_REFORMAT  => 0
                        );
    like($ret, qr/OK.*/, 'remote engine started for recovery');

    foreach(0..$nctr-1)
    {
         $ret = ZSOpen($node->conn(0),"ctr-$_",3,0,"ZS_CTNR_RW_MODE","yes","ZS_DURABILITY_HW_CRASH_SAFE",$ctr_type[$_%2]);
         like ($ret, qr/^OK.*/, $ret);
         $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
         $cguids[$_]=$cguid;
    }

    @threads = ();
    foreach(0..$nctr-1)
    {
        print "$_==count=$count[$_]\n";
        push(@threads, threads->new (\&worker_read,$_, $cguids[$_], $count[$_]));
    }
    $_->join for (@threads);

    return;
}

sub test_init {
    my $ssh = shift;

    $node = Fdftest::RemoteNode->new(
                ip          => "10.197.16.176",
                port        => "24422",
                nconn       => 16,
                stats_log   => "/tmp/24422/zsstats.log",
                zs_log      => "/tmp/24422/zs.log",
                ssh         => $ssh,
            );
    }

sub test_clean {
    $node->stop();
    $node->set_ZS_prop(ZS_REFORMAT  => 1);
    $node->set_ZS_prop(ZS_FLOG_MODE => "ZS_FLOG_FILE_MODE");


    return;
}

#
# main
#
{
    my $ssh = prepare(ip => "10.197.16.176");
    remote($ssh);
    test_init($ssh);

    test_run_node();
    sleep(10);
    $node->reboot();
    foreach(@threads){
        $_->kill('KILL');
    }
    test_run_recovery();
    test_clean();
}


# clean ENV
END {
   $node->clean();
}
