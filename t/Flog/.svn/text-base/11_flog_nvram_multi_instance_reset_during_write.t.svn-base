# file: 
# author: Yiwen Lu
# email: yiwenlu@hengtiansoft.com
# date: Nov 11, 2014
# description: 

#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../wrapper/lib";
use Fdftest::Fdfapi;
use Fdftest::RemoteNode;
use Fdftest::Stress;
use Test::More 'no_plan';
use threads;
use threads::shared;
use threads 'exit' => 'threads_only';
use Data::Dumper;

my $node;
my %count:shared ;
my $num_nodes = 2;
my @nodes;
sub worker_write{
    $SIG{'KILL'} = sub { print "killed\n"; threads->exit(); };
    my ($node,$con,$cguid,$index) = @_;
    my $ret;
    my $nops = 1500;
    $count{$index}{$con} = 0;
    #print "worker_write:node = $node->{'port'},con = $node->conn($con)\n";
    my $flag;
    foreach(1..$nops){
        $flag = 1;
        $ret = ZSTransactionStart(
            $node->conn($con),
            );
        like($ret, qr/OK.*/, "$node->{'port'},cguid=$cguid,offset=$_,".'ZSTransactionStart');
        $ret = ZSSet($node->conn($con), $cguid, $_, 100, 64000,1, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSSet($node->conn($con), $cguid, $_, 101, 128000,1, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSSet($node->conn($con), $cguid, $_, (102+$_), 512,6, "ZS_WRITE_MUST_NOT_EXIST");
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
        $flag = 0 if (!($ret =~ /OK.*/));
        $ret = ZSTransactionCommit(
            $node->conn($con)
            );
        like($ret, qr/OK.*/, "$node->{'port'},cguid=$cguid,offset=$_,".'ZSTransactionCommit');
        $flag = 0 if (!($ret =~ /OK.*/));
        $count{$index}{$con}++ if ($flag == 1);
    }
}

sub worker_read{
    my $ret;
    my ($node,$con,$cguid,$count) = @_;
    #print "worker_read:node = $node->{'port'},con = $node->conn($con),count=$count\n";
    foreach(1..$count){
        $ret = ZSGet($node->conn($con), $cguid, $_, 100, 64000, 1);
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
        $ret = ZSGet($node->conn($con), $cguid, $_, 101, 128000, 1);
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
        $ret = ZSGet($node->conn($con), $cguid, $_, (102+$_), 512, 6);
        like ($ret, qr/^OK.*/, $node->{'port'}.":".$ret);
    }
    $ret = ZSGet($node->conn($con), $cguid, $count+1, 100, 64000, 1);
    like ($ret, qr/^Error.*/, $node->{"port"}.":".$ret);
    $ret = ZSGet($node->conn($con), $cguid, $count+1, 101, 128000, 1);
    like ($ret, qr/^Error.*/, $node->{"port"}.":".$ret);
    $ret = ZSGet($node->conn($con), $cguid, $count+1, (102+$count+1), 512, 6);
    like ($ret, qr/^Error.*/, $node->{"port"}.":".$ret);

}

my @threads;
my %node_cguids;
my $nctr = 3;
my @ctr_type = ("BTREE","BTREE");
my $ret;
my $cguid;


sub test_run_node {
    foreach(@nodes)
    {
        $ret = $_->start(
            ZS_REFORMAT  => 1
            );
        like($ret, qr/OK.*/, 'remote engine started');
    }

    
    foreach(@nodes)
    {
        $node = $_;
        foreach(0..$nctr-1)
        {
            $ret = ZSOpen($node->conn(0),"ctr-$_",3,0,"ZS_CTNR_CREATE","yes","ZS_DURABILITY_HW_CRASH_SAFE",$ctr_type[$_%2]);
            like ($ret, qr/^OK.*/, $ret);
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            $node_cguids{$node}{$_} = $cguid;
        }

    }

    @threads = ();
    foreach(1..@nodes)
    {
        my $index = $_;
        $node = $nodes[$_-1];
        $count{$index} = &share({});
        foreach(0..$nctr-1)
        {
            #print "start write:node=$node->{'port'}, cguid=$node_cguids{$node}{$_}, index = $index\n";
            push(@threads, threads->new (\&worker_write, $node, $_, $node_cguids{$node}{$_}, $index));
        }
    }


    return;
}

sub test_run_recovery {

    print "<<< Test recovery with async_write=yes on remote engine >>>.\n";
    foreach(@nodes)
    {   
        #workaroud for FDF202
        #sleep(10);
        $ret = $_->start(
            ZS_REFORMAT  =>0 
            );
        like($ret, qr/OK.*/, 'remote engine restarted');
    }


    foreach(@nodes)
    {
        $node = $_;
        foreach(0..$nctr-1)
        {
            $ret = ZSOpen($node->conn(0),"ctr-$_",3,0,"ZS_CTNR_RW_MODE","yes","ZS_DURABILITY_HW_CRASH_SAFE",$ctr_type[$_%2]);
            like ($ret, qr/^OK.*/, $ret);
            $cguid = $1 if ($ret =~ /OK cguid=(\d+)/);
            $node_cguids{$node}{$_} = $cguid;
        }

    }

    @threads = ();
    foreach(1..@nodes)
    {
        my $index = $_;
        $node = $nodes[$_-1];
        foreach(0..$nctr-1)
        {
            print "worker_read start: node = $node->{'port'}, cguid =$node_cguids{$node}{$_}, count = $count{$index}{$_}\n";
            push(@threads, threads->new (\&worker_read, $node, $_, $node_cguids{$node}{$_}, $count{$index}{$_}));
        }
    }
    $_->join for (@threads);

    print "read finish !\n";


    return;
}

my $remote_dir = "/schooner/data/remote_ftf";
sub test_init {
    my $ssh = shift;
    my $ip = "10.197.16.176";
    my $port = "24422";
    my $nvram_offset = 0;

    foreach(1..$num_nodes)
    {
        $node = Fdftest::RemoteNode->new(
            ip          => $ip,
            port        => $port+$_,
            nconn       => 128,
            stats_log   => "/tmp/".($port+$_)."/zsstats.log",
            zs_log      => "/tmp/".($port+$_)."/zs.log",
            prop        => "$remote_dir/conf/zs_ins".$_.".prop",
            local_prop  => "$Bin/../../conf/zs_ins".$_.".prop",
            ssh         => $ssh,
            flog_mode   => "ZS_FLOG_NVRAM_MODE",
            flog_nvram_file        => "/tmp/nvram_file",
            flog_nvram_file_offset => "$nvram_offset",
        );
        push @nodes, $node;
        $node->set_ZS_prop(ZS_LOG_BLOCK_SIZE  => 4096);
        print "ZS_LOG_BLOCK_SIZE = ".$node->get_ZS_prop("ZS_LOG_BLOCK_SIZE")."\n";
        $nvram_offset = $nvram_offset + 3*1025*$node->get_ZS_prop("ZS_LOG_BLOCK_SIZE");
    }
}

sub test_clean {
    foreach(@nodes){
        print "node $_ to stop\n";
        $_->stop();
        $_->set_ZS_prop(ZS_REFORMAT  => 1);
    }
    return;
}

#
# main
#
{
    my $ssh = prepare(ip => "10.197.16.176");
    shared($ssh);
    test_init($ssh);

    foreach(@nodes){print "node = $_\n";}
    test_run_node();
    sleep(20);
    $nodes[0]->power_reset();
    foreach(@threads){
        $_->kill('KILL');
    }
    foreach(@nodes)
    {
        $_->{ssh} = $nodes[0]->{ssh};
    }
    test_run_recovery();
    test_clean();
}


# clean ENV
END {
    foreach(@nodes){
        $_->clean();
    }
}

